package result;

//This should be abstract as well, but GSON. 
public class Result{
	public Result() {}
	
	//returns string because we don't know who's printing
	public String ppResponse(){
		throw new UnsupportedOperationException("Do not call Result.ppResponse()");
	}
	public void build(){
		throw new UnsupportedOperationException("Do not call Result.build()");
	}
	//this returns whatever data type the object uses to store the data: string, list, etc
	protected Object getData(){
		throw new UnsupportedOperationException("Do not call Result.getData()");
	}
	
	public boolean isCorrect(Result toCompare) {
		return (this.getData().equals( toCompare.getData())); //check if data objects are equal
	}
	
	public boolean isGradeable(){
		return true;
	}
	
	@Override	
	/* (non-Javadoc)
	 * Generated by Eclipse (Sort-of)
	 * @see java.lang.Object#hashCode()
	 */
	public boolean equals(Object obj){
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof Result)){
			return false;
		}
		if(!(((Result)obj).getData().equals(this.getData()))){
			return false;
		}
		if(!(((Result)obj).isGradeable() == (this.isGradeable()))){
			return false;
		}
		if(!(((Result)obj).ppResponse().equals(this.ppResponse()))){
			return false;
		}
		return true;
	}
	
	/* (non-Javadoc)
	 * Generated by Eclipse (Sort-of)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((getData() == null) ? 0 : getData().hashCode());
		result = prime * result
				+ ((ppResponse() == null) ? 0 : ppResponse().hashCode());
		return result;
	}
	
}
